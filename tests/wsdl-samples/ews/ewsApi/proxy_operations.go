// Code generated by gowsdlsoap DO NOT EDIT.

package ewsApi

import (
	"context"
	"github.com/go-aegian/gowsdlsoap/proxy"
)

var envelopeXmlns map[string]string = map[string]string{

	"m": "http://schemas.microsoft.com/exchange/services/2006/messages",

	"t": "http://schemas.microsoft.com/exchange/services/2006/types",

	"xs": "http://www.w3.org/2001/XMLSchema",

	"xsi": "http://www.w3.org/2001/XMLSchema-instance",
}

type ExchangeServicePortType interface {
	ResolveNames(request *ResolveNamesType) (*ResolveNamesResponseType, error)

	ResolveNamesContext(ctx context.Context, request *ResolveNamesType) (*ResolveNamesResponseType, error)

	ExpandDL(request *ExpandDLType) (*ExpandDLResponseType, error)

	ExpandDLContext(ctx context.Context, request *ExpandDLType) (*ExpandDLResponseType, error)

	GetServerTimeZones(request *GetServerTimeZonesType) (*GetServerTimeZonesResponseType, error)

	GetServerTimeZonesContext(ctx context.Context, request *GetServerTimeZonesType) (*GetServerTimeZonesResponseType, error)

	FindFolder(request *FindFolderType) (*FindFolderResponseType, error)

	FindFolderContext(ctx context.Context, request *FindFolderType) (*FindFolderResponseType, error)

	FindItem(request *FindItemType) (*FindItemResponseType, error)

	FindItemContext(ctx context.Context, request *FindItemType) (*FindItemResponseType, error)

	GetFolder(request *GetFolderType) (*GetFolderResponseType, error)

	GetFolderContext(ctx context.Context, request *GetFolderType) (*GetFolderResponseType, error)

	UploadItems(request *UploadItemsType) (*UploadItemsResponseType, error)

	UploadItemsContext(ctx context.Context, request *UploadItemsType) (*UploadItemsResponseType, error)

	ExportItems(request *ExportItemsType) (*ExportItemsResponseType, error)

	ExportItemsContext(ctx context.Context, request *ExportItemsType) (*ExportItemsResponseType, error)

	ConvertId(request *ConvertIdType) (*ConvertIdResponseType, error)

	ConvertIdContext(ctx context.Context, request *ConvertIdType) (*ConvertIdResponseType, error)

	CreateFolder(request *CreateFolderType) (*CreateFolderResponseType, error)

	CreateFolderContext(ctx context.Context, request *CreateFolderType) (*CreateFolderResponseType, error)

	CreateFolderPath(request *CreateFolderPathType) (*CreateFolderPathResponseType, error)

	CreateFolderPathContext(ctx context.Context, request *CreateFolderPathType) (*CreateFolderPathResponseType, error)

	DeleteFolder(request *DeleteFolderType) (*DeleteFolderResponseType, error)

	DeleteFolderContext(ctx context.Context, request *DeleteFolderType) (*DeleteFolderResponseType, error)

	EmptyFolder(request *EmptyFolderType) (*EmptyFolderResponseType, error)

	EmptyFolderContext(ctx context.Context, request *EmptyFolderType) (*EmptyFolderResponseType, error)

	UpdateFolder(request *UpdateFolderType) (*UpdateFolderResponseType, error)

	UpdateFolderContext(ctx context.Context, request *UpdateFolderType) (*UpdateFolderResponseType, error)

	MoveFolder(request *MoveFolderType) (*MoveFolderResponseType, error)

	MoveFolderContext(ctx context.Context, request *MoveFolderType) (*MoveFolderResponseType, error)

	CopyFolder(request *CopyFolderType) (*CopyFolderResponseType, error)

	CopyFolderContext(ctx context.Context, request *CopyFolderType) (*CopyFolderResponseType, error)

	Subscribe(request *SubscribeType) (*SubscribeResponseType, error)

	SubscribeContext(ctx context.Context, request *SubscribeType) (*SubscribeResponseType, error)

	Unsubscribe(request *UnsubscribeType) (*UnsubscribeResponseType, error)

	UnsubscribeContext(ctx context.Context, request *UnsubscribeType) (*UnsubscribeResponseType, error)

	GetEvents(request *GetEventsType) (*GetEventsResponseType, error)

	GetEventsContext(ctx context.Context, request *GetEventsType) (*GetEventsResponseType, error)

	GetStreamingEvents(request *GetStreamingEventsType) (*GetStreamingEventsResponseType, error)

	GetStreamingEventsContext(ctx context.Context, request *GetStreamingEventsType) (*GetStreamingEventsResponseType, error)

	SyncFolderHierarchy(request *SyncFolderHierarchyType) (*SyncFolderHierarchyResponseType, error)

	SyncFolderHierarchyContext(ctx context.Context, request *SyncFolderHierarchyType) (*SyncFolderHierarchyResponseType, error)

	SyncFolderItems(request *SyncFolderItemsType) (*SyncFolderItemsResponseType, error)

	SyncFolderItemsContext(ctx context.Context, request *SyncFolderItemsType) (*SyncFolderItemsResponseType, error)

	CreateManagedFolder(request *CreateManagedFolderRequestType) (*CreateManagedFolderResponseType, error)

	CreateManagedFolderContext(ctx context.Context, request *CreateManagedFolderRequestType) (*CreateManagedFolderResponseType, error)

	GetItem(request *GetItemType) (*GetItemResponseType, error)

	GetItemContext(ctx context.Context, request *GetItemType) (*GetItemResponseType, error)

	CreateItem(request *CreateItemType) (*CreateItemResponseType, error)

	CreateItemContext(ctx context.Context, request *CreateItemType) (*CreateItemResponseType, error)

	DeleteItem(request *DeleteItemType) (*DeleteItemResponseType, error)

	DeleteItemContext(ctx context.Context, request *DeleteItemType) (*DeleteItemResponseType, error)

	UpdateItem(request *UpdateItemType) (*UpdateItemResponseType, error)

	UpdateItemContext(ctx context.Context, request *UpdateItemType) (*UpdateItemResponseType, error)

	UpdateItemInRecoverableItems(request *UpdateItemInRecoverableItemsType) (*UpdateItemInRecoverableItemsResponseType, error)

	UpdateItemInRecoverableItemsContext(ctx context.Context, request *UpdateItemInRecoverableItemsType) (*UpdateItemInRecoverableItemsResponseType, error)

	SendItem(request *SendItemType) (*SendItemResponseType, error)

	SendItemContext(ctx context.Context, request *SendItemType) (*SendItemResponseType, error)

	MoveItem(request *MoveItemType) (*MoveItemResponseType, error)

	MoveItemContext(ctx context.Context, request *MoveItemType) (*MoveItemResponseType, error)

	CopyItem(request *CopyItemType) (*CopyItemResponseType, error)

	CopyItemContext(ctx context.Context, request *CopyItemType) (*CopyItemResponseType, error)

	ArchiveItem(request *ArchiveItemType) (*ArchiveItemResponseType, error)

	ArchiveItemContext(ctx context.Context, request *ArchiveItemType) (*ArchiveItemResponseType, error)

	CreateAttachment(request *CreateAttachmentType) (*CreateAttachmentResponseType, error)

	CreateAttachmentContext(ctx context.Context, request *CreateAttachmentType) (*CreateAttachmentResponseType, error)

	DeleteAttachment(request *DeleteAttachmentType) (*DeleteAttachmentResponseType, error)

	DeleteAttachmentContext(ctx context.Context, request *DeleteAttachmentType) (*DeleteAttachmentResponseType, error)

	GetAttachment(request *GetAttachmentType) (*GetAttachmentResponseType, error)

	GetAttachmentContext(ctx context.Context, request *GetAttachmentType) (*GetAttachmentResponseType, error)

	GetClientAccessToken(request *GetClientAccessTokenType) (*GetClientAccessTokenResponseType, error)

	GetClientAccessTokenContext(ctx context.Context, request *GetClientAccessTokenType) (*GetClientAccessTokenResponseType, error)

	GetDelegate(request *GetDelegateType) (*GetDelegateResponseMessageType, error)

	GetDelegateContext(ctx context.Context, request *GetDelegateType) (*GetDelegateResponseMessageType, error)

	AddDelegate(request *AddDelegateType) (*AddDelegateResponseMessageType, error)

	AddDelegateContext(ctx context.Context, request *AddDelegateType) (*AddDelegateResponseMessageType, error)

	RemoveDelegate(request *RemoveDelegateType) (*RemoveDelegateResponseMessageType, error)

	RemoveDelegateContext(ctx context.Context, request *RemoveDelegateType) (*RemoveDelegateResponseMessageType, error)

	UpdateDelegate(request *UpdateDelegateType) (*UpdateDelegateResponseMessageType, error)

	UpdateDelegateContext(ctx context.Context, request *UpdateDelegateType) (*UpdateDelegateResponseMessageType, error)

	CreateUserConfiguration(request *CreateUserConfigurationType) (*CreateUserConfigurationResponseType, error)

	CreateUserConfigurationContext(ctx context.Context, request *CreateUserConfigurationType) (*CreateUserConfigurationResponseType, error)

	DeleteUserConfiguration(request *DeleteUserConfigurationType) (*DeleteUserConfigurationResponseType, error)

	DeleteUserConfigurationContext(ctx context.Context, request *DeleteUserConfigurationType) (*DeleteUserConfigurationResponseType, error)

	GetUserConfiguration(request *GetUserConfigurationType) (*GetUserConfigurationResponseType, error)

	GetUserConfigurationContext(ctx context.Context, request *GetUserConfigurationType) (*GetUserConfigurationResponseType, error)

	GetSpecificUserConfiguration(request *GetSpecificUserConfigurationType) (*GetSpecificUserConfigurationResponseType, error)

	GetSpecificUserConfigurationContext(ctx context.Context, request *GetSpecificUserConfigurationType) (*GetSpecificUserConfigurationResponseType, error)

	UpdateUserConfiguration(request *UpdateUserConfigurationType) (*UpdateUserConfigurationResponseType, error)

	UpdateUserConfigurationContext(ctx context.Context, request *UpdateUserConfigurationType) (*UpdateUserConfigurationResponseType, error)

	GetUserAvailability(request *GetUserAvailabilityRequestType) (*GetUserAvailabilityResponseType, error)

	GetUserAvailabilityContext(ctx context.Context, request *GetUserAvailabilityRequestType) (*GetUserAvailabilityResponseType, error)

	GetUserOofSettings(request *GetUserOofSettingsRequest) (*GetUserOofSettingsResponse, error)

	GetUserOofSettingsContext(ctx context.Context, request *GetUserOofSettingsRequest) (*GetUserOofSettingsResponse, error)

	SetUserOofSettings(request *SetUserOofSettingsRequest) (*SetUserOofSettingsResponse, error)

	SetUserOofSettingsContext(ctx context.Context, request *SetUserOofSettingsRequest) (*SetUserOofSettingsResponse, error)

	GetServiceConfiguration(request *GetServiceConfigurationType) (*GetServiceConfigurationResponseMessageType, error)

	GetServiceConfigurationContext(ctx context.Context, request *GetServiceConfigurationType) (*GetServiceConfigurationResponseMessageType, error)

	GetMailTips(request *GetMailTipsType) (*GetMailTipsResponseMessageType, error)

	GetMailTipsContext(ctx context.Context, request *GetMailTipsType) (*GetMailTipsResponseMessageType, error)

	PlayOnPhone(request *PlayOnPhoneType) (*PlayOnPhoneResponseMessageType, error)

	PlayOnPhoneContext(ctx context.Context, request *PlayOnPhoneType) (*PlayOnPhoneResponseMessageType, error)

	GetPhoneCallInformation(request *GetPhoneCallInformationType) (*GetPhoneCallInformationResponseMessageType, error)

	GetPhoneCallInformationContext(ctx context.Context, request *GetPhoneCallInformationType) (*GetPhoneCallInformationResponseMessageType, error)

	DisconnectPhoneCall(request *DisconnectPhoneCallType) (*DisconnectPhoneCallResponseMessageType, error)

	DisconnectPhoneCallContext(ctx context.Context, request *DisconnectPhoneCallType) (*DisconnectPhoneCallResponseMessageType, error)

	GetSharingMetadata(request *GetSharingMetadataType) (*GetSharingMetadataResponseMessageType, error)

	GetSharingMetadataContext(ctx context.Context, request *GetSharingMetadataType) (*GetSharingMetadataResponseMessageType, error)

	RefreshSharingFolder(request *RefreshSharingFolderType) (*RefreshSharingFolderResponseMessageType, error)

	RefreshSharingFolderContext(ctx context.Context, request *RefreshSharingFolderType) (*RefreshSharingFolderResponseMessageType, error)

	GetSharingFolder(request *GetSharingFolderType) (*GetSharingFolderResponseMessageType, error)

	GetSharingFolderContext(ctx context.Context, request *GetSharingFolderType) (*GetSharingFolderResponseMessageType, error)

	SetTeamMailbox(request *SetTeamMailboxRequestType) (*SetTeamMailboxResponseMessageType, error)

	SetTeamMailboxContext(ctx context.Context, request *SetTeamMailboxRequestType) (*SetTeamMailboxResponseMessageType, error)

	UnpinTeamMailbox(request *UnpinTeamMailboxRequestType) (*UnpinTeamMailboxResponseMessageType, error)

	UnpinTeamMailboxContext(ctx context.Context, request *UnpinTeamMailboxRequestType) (*UnpinTeamMailboxResponseMessageType, error)

	GetRoomLists(request *GetRoomListsType) (*GetRoomListsResponseMessageType, error)

	GetRoomListsContext(ctx context.Context, request *GetRoomListsType) (*GetRoomListsResponseMessageType, error)

	GetRooms(request *GetRoomsType) (*GetRoomsResponseMessageType, error)

	GetRoomsContext(ctx context.Context, request *GetRoomsType) (*GetRoomsResponseMessageType, error)

	FindMessageTrackingReport(request *FindMessageTrackingReportRequestType) (*FindMessageTrackingReportResponseMessageType, error)

	FindMessageTrackingReportContext(ctx context.Context, request *FindMessageTrackingReportRequestType) (*FindMessageTrackingReportResponseMessageType, error)

	GetMessageTrackingReport(request *GetMessageTrackingReportRequestType) (*GetMessageTrackingReportResponseMessageType, error)

	GetMessageTrackingReportContext(ctx context.Context, request *GetMessageTrackingReportRequestType) (*GetMessageTrackingReportResponseMessageType, error)

	FindConversation(request *FindConversationType) (*FindConversationResponseMessageType, error)

	FindConversationContext(ctx context.Context, request *FindConversationType) (*FindConversationResponseMessageType, error)

	ApplyConversationAction(request *ApplyConversationActionType) (*ApplyConversationActionResponseType, error)

	ApplyConversationActionContext(ctx context.Context, request *ApplyConversationActionType) (*ApplyConversationActionResponseType, error)

	GetConversationItems(request *GetConversationItemsType) (*GetConversationItemsResponseType, error)

	GetConversationItemsContext(ctx context.Context, request *GetConversationItemsType) (*GetConversationItemsResponseType, error)

	FindPeople(request *FindPeopleType) (*FindPeopleResponseMessageType, error)

	FindPeopleContext(ctx context.Context, request *FindPeopleType) (*FindPeopleResponseMessageType, error)

	FindTags(request *FindTagsType) (*FindTagsResponseMessageType, error)

	FindTagsContext(ctx context.Context, request *FindTagsType) (*FindTagsResponseMessageType, error)

	AddTag(request *AddTagType) (*AddTagResponseMessageType, error)

	AddTagContext(ctx context.Context, request *AddTagType) (*AddTagResponseMessageType, error)

	HideTag(request *HideTagType) (*HideTagResponseMessageType, error)

	HideTagContext(ctx context.Context, request *HideTagType) (*HideTagResponseMessageType, error)

	GetPersona(request *GetPersonaType) (*GetPersonaResponseMessageType, error)

	GetPersonaContext(ctx context.Context, request *GetPersonaType) (*GetPersonaResponseMessageType, error)

	GetInboxRules(request *GetInboxRulesRequestType) (*GetInboxRulesResponseType, error)

	GetInboxRulesContext(ctx context.Context, request *GetInboxRulesRequestType) (*GetInboxRulesResponseType, error)

	UpdateInboxRules(request *UpdateInboxRulesRequestType) (*UpdateInboxRulesResponseType, error)

	UpdateInboxRulesContext(ctx context.Context, request *UpdateInboxRulesRequestType) (*UpdateInboxRulesResponseType, error)

	GetPasswordExpirationDate(request *GetPasswordExpirationDateType) (*GetPasswordExpirationDateResponseMessageType, error)

	GetPasswordExpirationDateContext(ctx context.Context, request *GetPasswordExpirationDateType) (*GetPasswordExpirationDateResponseMessageType, error)

	GetSearchableMailboxes(request *GetSearchableMailboxesType) (*GetSearchableMailboxesResponseMessageType, error)

	GetSearchableMailboxesContext(ctx context.Context, request *GetSearchableMailboxesType) (*GetSearchableMailboxesResponseMessageType, error)

	SearchMailboxes(request *SearchMailboxesType) (*SearchMailboxesResponseType, error)

	SearchMailboxesContext(ctx context.Context, request *SearchMailboxesType) (*SearchMailboxesResponseType, error)

	GetDiscoverySearchConfiguration(request *GetDiscoverySearchConfigurationType) (*GetDiscoverySearchConfigurationResponseMessageType, error)

	GetDiscoverySearchConfigurationContext(ctx context.Context, request *GetDiscoverySearchConfigurationType) (*GetDiscoverySearchConfigurationResponseMessageType, error)

	GetHoldOnMailboxes(request *GetHoldOnMailboxesType) (*GetHoldOnMailboxesResponseMessageType, error)

	GetHoldOnMailboxesContext(ctx context.Context, request *GetHoldOnMailboxesType) (*GetHoldOnMailboxesResponseMessageType, error)

	SetHoldOnMailboxes(request *SetHoldOnMailboxesType) (*SetHoldOnMailboxesResponseMessageType, error)

	SetHoldOnMailboxesContext(ctx context.Context, request *SetHoldOnMailboxesType) (*SetHoldOnMailboxesResponseMessageType, error)

	GetNonIndexableItemStatistics(request *GetNonIndexableItemStatisticsType) (*GetNonIndexableItemStatisticsResponseMessageType, error)

	GetNonIndexableItemStatisticsContext(ctx context.Context, request *GetNonIndexableItemStatisticsType) (*GetNonIndexableItemStatisticsResponseMessageType, error)

	GetNonIndexableItemDetails(request *GetNonIndexableItemDetailsType) (*GetNonIndexableItemDetailsResponseMessageType, error)

	GetNonIndexableItemDetailsContext(ctx context.Context, request *GetNonIndexableItemDetailsType) (*GetNonIndexableItemDetailsResponseMessageType, error)

	MarkAllItemsAsRead(request *MarkAllItemsAsReadType) (*MarkAllItemsAsReadResponseType, error)

	MarkAllItemsAsReadContext(ctx context.Context, request *MarkAllItemsAsReadType) (*MarkAllItemsAsReadResponseType, error)

	MarkAsJunk(request *MarkAsJunkType) (*MarkAsJunkResponseType, error)

	MarkAsJunkContext(ctx context.Context, request *MarkAsJunkType) (*MarkAsJunkResponseType, error)

	ReportMessage(request *ReportMessageType) (*ReportMessageResponseType, error)

	ReportMessageContext(ctx context.Context, request *ReportMessageType) (*ReportMessageResponseType, error)

	GetAppManifests(request *GetAppManifestsType) (*GetAppManifestsResponseType, error)

	GetAppManifestsContext(ctx context.Context, request *GetAppManifestsType) (*GetAppManifestsResponseType, error)

	AddNewImContactToGroup(request *AddNewImContactToGroupType) (*AddNewImContactToGroupResponseMessageType, error)

	AddNewImContactToGroupContext(ctx context.Context, request *AddNewImContactToGroupType) (*AddNewImContactToGroupResponseMessageType, error)

	AddNewTelUriContactToGroup(request *AddNewTelUriContactToGroupType) (*AddNewTelUriContactToGroupResponseMessageType, error)

	AddNewTelUriContactToGroupContext(ctx context.Context, request *AddNewTelUriContactToGroupType) (*AddNewTelUriContactToGroupResponseMessageType, error)

	AddImContactToGroup(request *AddImContactToGroupType) (*AddImContactToGroupResponseMessageType, error)

	AddImContactToGroupContext(ctx context.Context, request *AddImContactToGroupType) (*AddImContactToGroupResponseMessageType, error)

	RemoveImContactFromGroup(request *RemoveImContactFromGroupType) (*RemoveImContactFromGroupResponseMessageType, error)

	RemoveImContactFromGroupContext(ctx context.Context, request *RemoveImContactFromGroupType) (*RemoveImContactFromGroupResponseMessageType, error)

	AddImGroup(request *AddImGroupType) (*AddImGroupResponseMessageType, error)

	AddImGroupContext(ctx context.Context, request *AddImGroupType) (*AddImGroupResponseMessageType, error)

	AddDistributionGroupToImList(request *AddDistributionGroupToImListType) (*AddDistributionGroupToImListResponseMessageType, error)

	AddDistributionGroupToImListContext(ctx context.Context, request *AddDistributionGroupToImListType) (*AddDistributionGroupToImListResponseMessageType, error)

	GetImItemList(request *GetImItemListType) (*GetImItemListResponseMessageType, error)

	GetImItemListContext(ctx context.Context, request *GetImItemListType) (*GetImItemListResponseMessageType, error)

	GetImItems(request *GetImItemsType) (*GetImItemsResponseMessageType, error)

	GetImItemsContext(ctx context.Context, request *GetImItemsType) (*GetImItemsResponseMessageType, error)

	RemoveContactFromImList(request *RemoveContactFromImListType) (*RemoveContactFromImListResponseMessageType, error)

	RemoveContactFromImListContext(ctx context.Context, request *RemoveContactFromImListType) (*RemoveContactFromImListResponseMessageType, error)

	RemoveDistributionGroupFromImList(request *RemoveDistributionGroupFromImListType) (*RemoveDistributionGroupFromImListResponseMessageType, error)

	RemoveDistributionGroupFromImListContext(ctx context.Context, request *RemoveDistributionGroupFromImListType) (*RemoveDistributionGroupFromImListResponseMessageType, error)

	RemoveImGroup(request *RemoveImGroupType) (*RemoveImGroupResponseMessageType, error)

	RemoveImGroupContext(ctx context.Context, request *RemoveImGroupType) (*RemoveImGroupResponseMessageType, error)

	SetImGroup(request *SetImGroupType) (*SetImGroupResponseMessageType, error)

	SetImGroupContext(ctx context.Context, request *SetImGroupType) (*SetImGroupResponseMessageType, error)

	SetImListMigrationCompleted(request *SetImListMigrationCompletedType) (*SetImListMigrationCompletedResponseMessageType, error)

	SetImListMigrationCompletedContext(ctx context.Context, request *SetImListMigrationCompletedType) (*SetImListMigrationCompletedResponseMessageType, error)

	GetUserRetentionPolicyTags(request *GetUserRetentionPolicyTagsType) (*GetUserRetentionPolicyTagsResponseMessageType, error)

	GetUserRetentionPolicyTagsContext(ctx context.Context, request *GetUserRetentionPolicyTagsType) (*GetUserRetentionPolicyTagsResponseMessageType, error)

	InstallApp(request *InstallAppType) (*InstallAppResponseType, error)

	InstallAppContext(ctx context.Context, request *InstallAppType) (*InstallAppResponseType, error)

	UninstallApp(request *UninstallAppType) (*UninstallAppResponseType, error)

	UninstallAppContext(ctx context.Context, request *UninstallAppType) (*UninstallAppResponseType, error)

	DisableApp(request *DisableAppType) (*DisableAppResponseType, error)

	DisableAppContext(ctx context.Context, request *DisableAppType) (*DisableAppResponseType, error)

	GetAppMarketplaceUrl(request *GetAppMarketplaceUrlType) (*GetAppMarketplaceUrlResponseMessageType, error)

	GetAppMarketplaceUrlContext(ctx context.Context, request *GetAppMarketplaceUrlType) (*GetAppMarketplaceUrlResponseMessageType, error)

	FindAvailableMeetingTimes(request *FindAvailableMeetingTimesType) (*FindAvailableMeetingTimesResponseMessageType, error)

	FindAvailableMeetingTimesContext(ctx context.Context, request *FindAvailableMeetingTimesType) (*FindAvailableMeetingTimesResponseMessageType, error)

	FindMeetingTimeCandidates(request *FindMeetingTimeCandidatesType) (*FindMeetingTimeCandidatesResponseMessageType, error)

	FindMeetingTimeCandidatesContext(ctx context.Context, request *FindMeetingTimeCandidatesType) (*FindMeetingTimeCandidatesResponseMessageType, error)

	GetUserPhoto(request *GetUserPhotoType) (*GetUserPhotoResponseMessageType, error)

	GetUserPhotoContext(ctx context.Context, request *GetUserPhotoType) (*GetUserPhotoResponseMessageType, error)

	SetUserPhoto(request *SetUserPhotoType) (*SetUserPhotoResponseMessageType, error)

	SetUserPhotoContext(ctx context.Context, request *SetUserPhotoType) (*SetUserPhotoResponseMessageType, error)

	GetMeetingSpace(request *GetMeetingSpaceType) (*GetMeetingSpaceResponseMessageType, error)

	GetMeetingSpaceContext(ctx context.Context, request *GetMeetingSpaceType) (*GetMeetingSpaceResponseMessageType, error)

	DeleteMeetingSpace(request *DeleteMeetingSpaceType) (*DeleteMeetingSpaceResponseMessageType, error)

	DeleteMeetingSpaceContext(ctx context.Context, request *DeleteMeetingSpaceType) (*DeleteMeetingSpaceResponseMessageType, error)

	UpdateMeetingSpace(request *UpdateMeetingSpaceType) (*UpdateMeetingSpaceResponseMessageType, error)

	UpdateMeetingSpaceContext(ctx context.Context, request *UpdateMeetingSpaceType) (*UpdateMeetingSpaceResponseMessageType, error)

	CreateMeetingSpace(request *CreateMeetingSpaceType) (*CreateMeetingSpaceResponseMessageType, error)

	CreateMeetingSpaceContext(ctx context.Context, request *CreateMeetingSpaceType) (*CreateMeetingSpaceResponseMessageType, error)

	FindMeetingSpaceByJoinUrl(request *FindMeetingSpaceByJoinUrlType) (*FindMeetingSpaceByJoinUrlResponseMessageType, error)

	FindMeetingSpaceByJoinUrlContext(ctx context.Context, request *FindMeetingSpaceByJoinUrlType) (*FindMeetingSpaceByJoinUrlResponseMessageType, error)

	GetMeetingInstance(request *GetMeetingInstanceRequestType) (*GetMeetingInstanceResponseMessageType, error)

	GetMeetingInstanceContext(ctx context.Context, request *GetMeetingInstanceRequestType) (*GetMeetingInstanceResponseMessageType, error)

	DeleteMeetingInstance(request *DeleteMeetingInstanceRequestType) (*DeleteMeetingInstanceResponseMessageType, error)

	DeleteMeetingInstanceContext(ctx context.Context, request *DeleteMeetingInstanceRequestType) (*DeleteMeetingInstanceResponseMessageType, error)

	UpdateMeetingInstance(request *UpdateMeetingInstanceRequestType) (*UpdateMeetingInstanceResponseMessageType, error)

	UpdateMeetingInstanceContext(ctx context.Context, request *UpdateMeetingInstanceRequestType) (*UpdateMeetingInstanceResponseMessageType, error)

	CreateMeetingInstance(request *CreateMeetingInstanceRequestType) (*CreateMeetingInstanceResponseMessageType, error)

	CreateMeetingInstanceContext(ctx context.Context, request *CreateMeetingInstanceRequestType) (*CreateMeetingInstanceResponseMessageType, error)

	StartSearchSession(request *StartSearchSession) (*StartSearchSessionResponseMessage, error)

	StartSearchSessionContext(ctx context.Context, request *StartSearchSession) (*StartSearchSessionResponseMessage, error)

	GetSearchSuggestions(request *GetSearchSuggestions) (*GetSearchSuggestionsResponseMessage, error)

	GetSearchSuggestionsContext(ctx context.Context, request *GetSearchSuggestions) (*GetSearchSuggestionsResponseMessage, error)

	DeleteSearchSuggestion(request *DeleteSearchSuggestion) (*DeleteSearchSuggestionResponseMessageType, error)

	DeleteSearchSuggestionContext(ctx context.Context, request *DeleteSearchSuggestion) (*DeleteSearchSuggestionResponseMessageType, error)

	ExecuteSearch(request *ExecuteSearch) (*ExecuteSearchResponseMessage, error)

	ExecuteSearchContext(ctx context.Context, request *ExecuteSearch) (*ExecuteSearchResponseMessage, error)

	EndSearchSession(request *EndSearchSession) (*EndSearchSessionResponseMessage, error)

	EndSearchSessionContext(ctx context.Context, request *EndSearchSession) (*EndSearchSessionResponseMessage, error)

	GetLastPrivateCatalogUpdate(request *GetLastPrivateCatalogUpdateType) (*GetLastPrivateCatalogUpdateResponseType, error)

	GetLastPrivateCatalogUpdateContext(ctx context.Context, request *GetLastPrivateCatalogUpdateType) (*GetLastPrivateCatalogUpdateResponseType, error)

	GetPrivateCatalogAddIns(request *GetPrivateCatalogAddInsType) (*GetPrivateCatalogAddInsResponseType, error)

	GetPrivateCatalogAddInsContext(ctx context.Context, request *GetPrivateCatalogAddInsType) (*GetPrivateCatalogAddInsResponseType, error)
}

type exchangeServicePortType struct {
	client *proxy.Client
}

func NewExchangeServicePortType(client *proxy.Client) ExchangeServicePortType {
	client.SetXmlns(envelopeXmlns)
	return &exchangeServicePortType{client: client}
}

func (service *exchangeServicePortType) ResolveNamesContext(ctx context.Context, request *ResolveNamesType) (*ResolveNamesResponseType, error) {
	response := new(ResolveNamesResponseType)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/ResolveNames", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) ResolveNames(request *ResolveNamesType) (*ResolveNamesResponseType, error) {
	return service.ResolveNamesContext(context.Background(), request)
}

func (service *exchangeServicePortType) ExpandDLContext(ctx context.Context, request *ExpandDLType) (*ExpandDLResponseType, error) {
	response := new(ExpandDLResponseType)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/ExpandDL", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) ExpandDL(request *ExpandDLType) (*ExpandDLResponseType, error) {
	return service.ExpandDLContext(context.Background(), request)
}

func (service *exchangeServicePortType) GetServerTimeZonesContext(ctx context.Context, request *GetServerTimeZonesType) (*GetServerTimeZonesResponseType, error) {
	response := new(GetServerTimeZonesResponseType)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/GetServerTimeZones", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) GetServerTimeZones(request *GetServerTimeZonesType) (*GetServerTimeZonesResponseType, error) {
	return service.GetServerTimeZonesContext(context.Background(), request)
}

func (service *exchangeServicePortType) FindFolderContext(ctx context.Context, request *FindFolderType) (*FindFolderResponseType, error) {
	response := new(FindFolderResponseType)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/FindFolder", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) FindFolder(request *FindFolderType) (*FindFolderResponseType, error) {
	return service.FindFolderContext(context.Background(), request)
}

func (service *exchangeServicePortType) FindItemContext(ctx context.Context, request *FindItemType) (*FindItemResponseType, error) {
	response := new(FindItemResponseType)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/FindItem", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) FindItem(request *FindItemType) (*FindItemResponseType, error) {
	return service.FindItemContext(context.Background(), request)
}

func (service *exchangeServicePortType) GetFolderContext(ctx context.Context, request *GetFolderType) (*GetFolderResponseType, error) {
	response := new(GetFolderResponseType)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/GetFolder", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) GetFolder(request *GetFolderType) (*GetFolderResponseType, error) {
	return service.GetFolderContext(context.Background(), request)
}

func (service *exchangeServicePortType) UploadItemsContext(ctx context.Context, request *UploadItemsType) (*UploadItemsResponseType, error) {
	response := new(UploadItemsResponseType)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/UploadItems", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) UploadItems(request *UploadItemsType) (*UploadItemsResponseType, error) {
	return service.UploadItemsContext(context.Background(), request)
}

func (service *exchangeServicePortType) ExportItemsContext(ctx context.Context, request *ExportItemsType) (*ExportItemsResponseType, error) {
	response := new(ExportItemsResponseType)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/ExportItems", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) ExportItems(request *ExportItemsType) (*ExportItemsResponseType, error) {
	return service.ExportItemsContext(context.Background(), request)
}

func (service *exchangeServicePortType) ConvertIdContext(ctx context.Context, request *ConvertIdType) (*ConvertIdResponseType, error) {
	response := new(ConvertIdResponseType)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/ConvertId", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) ConvertId(request *ConvertIdType) (*ConvertIdResponseType, error) {
	return service.ConvertIdContext(context.Background(), request)
}

func (service *exchangeServicePortType) CreateFolderContext(ctx context.Context, request *CreateFolderType) (*CreateFolderResponseType, error) {
	response := new(CreateFolderResponseType)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/CreateFolder", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) CreateFolder(request *CreateFolderType) (*CreateFolderResponseType, error) {
	return service.CreateFolderContext(context.Background(), request)
}

func (service *exchangeServicePortType) CreateFolderPathContext(ctx context.Context, request *CreateFolderPathType) (*CreateFolderPathResponseType, error) {
	response := new(CreateFolderPathResponseType)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/CreateFolderPath", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) CreateFolderPath(request *CreateFolderPathType) (*CreateFolderPathResponseType, error) {
	return service.CreateFolderPathContext(context.Background(), request)
}

func (service *exchangeServicePortType) DeleteFolderContext(ctx context.Context, request *DeleteFolderType) (*DeleteFolderResponseType, error) {
	response := new(DeleteFolderResponseType)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/DeleteFolder", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) DeleteFolder(request *DeleteFolderType) (*DeleteFolderResponseType, error) {
	return service.DeleteFolderContext(context.Background(), request)
}

func (service *exchangeServicePortType) EmptyFolderContext(ctx context.Context, request *EmptyFolderType) (*EmptyFolderResponseType, error) {
	response := new(EmptyFolderResponseType)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/EmptyFolder", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) EmptyFolder(request *EmptyFolderType) (*EmptyFolderResponseType, error) {
	return service.EmptyFolderContext(context.Background(), request)
}

func (service *exchangeServicePortType) UpdateFolderContext(ctx context.Context, request *UpdateFolderType) (*UpdateFolderResponseType, error) {
	response := new(UpdateFolderResponseType)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/UpdateFolder", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) UpdateFolder(request *UpdateFolderType) (*UpdateFolderResponseType, error) {
	return service.UpdateFolderContext(context.Background(), request)
}

func (service *exchangeServicePortType) MoveFolderContext(ctx context.Context, request *MoveFolderType) (*MoveFolderResponseType, error) {
	response := new(MoveFolderResponseType)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/MoveFolder", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) MoveFolder(request *MoveFolderType) (*MoveFolderResponseType, error) {
	return service.MoveFolderContext(context.Background(), request)
}

func (service *exchangeServicePortType) CopyFolderContext(ctx context.Context, request *CopyFolderType) (*CopyFolderResponseType, error) {
	response := new(CopyFolderResponseType)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/CopyFolder", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) CopyFolder(request *CopyFolderType) (*CopyFolderResponseType, error) {
	return service.CopyFolderContext(context.Background(), request)
}

func (service *exchangeServicePortType) SubscribeContext(ctx context.Context, request *SubscribeType) (*SubscribeResponseType, error) {
	response := new(SubscribeResponseType)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/Subscribe", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) Subscribe(request *SubscribeType) (*SubscribeResponseType, error) {
	return service.SubscribeContext(context.Background(), request)
}

func (service *exchangeServicePortType) UnsubscribeContext(ctx context.Context, request *UnsubscribeType) (*UnsubscribeResponseType, error) {
	response := new(UnsubscribeResponseType)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/Unsubscribe", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) Unsubscribe(request *UnsubscribeType) (*UnsubscribeResponseType, error) {
	return service.UnsubscribeContext(context.Background(), request)
}

func (service *exchangeServicePortType) GetEventsContext(ctx context.Context, request *GetEventsType) (*GetEventsResponseType, error) {
	response := new(GetEventsResponseType)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/GetEvents", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) GetEvents(request *GetEventsType) (*GetEventsResponseType, error) {
	return service.GetEventsContext(context.Background(), request)
}

func (service *exchangeServicePortType) GetStreamingEventsContext(ctx context.Context, request *GetStreamingEventsType) (*GetStreamingEventsResponseType, error) {
	response := new(GetStreamingEventsResponseType)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/GetEvents", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) GetStreamingEvents(request *GetStreamingEventsType) (*GetStreamingEventsResponseType, error) {
	return service.GetStreamingEventsContext(context.Background(), request)
}

func (service *exchangeServicePortType) SyncFolderHierarchyContext(ctx context.Context, request *SyncFolderHierarchyType) (*SyncFolderHierarchyResponseType, error) {
	response := new(SyncFolderHierarchyResponseType)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/SyncFolderHierarchy", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) SyncFolderHierarchy(request *SyncFolderHierarchyType) (*SyncFolderHierarchyResponseType, error) {
	return service.SyncFolderHierarchyContext(context.Background(), request)
}

func (service *exchangeServicePortType) SyncFolderItemsContext(ctx context.Context, request *SyncFolderItemsType) (*SyncFolderItemsResponseType, error) {
	response := new(SyncFolderItemsResponseType)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/SyncFolderItems", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) SyncFolderItems(request *SyncFolderItemsType) (*SyncFolderItemsResponseType, error) {
	return service.SyncFolderItemsContext(context.Background(), request)
}

func (service *exchangeServicePortType) CreateManagedFolderContext(ctx context.Context, request *CreateManagedFolderRequestType) (*CreateManagedFolderResponseType, error) {
	response := new(CreateManagedFolderResponseType)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/CreateManagedFolder", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) CreateManagedFolder(request *CreateManagedFolderRequestType) (*CreateManagedFolderResponseType, error) {
	return service.CreateManagedFolderContext(context.Background(), request)
}

func (service *exchangeServicePortType) GetItemContext(ctx context.Context, request *GetItemType) (*GetItemResponseType, error) {
	response := new(GetItemResponseType)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/GetItem", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) GetItem(request *GetItemType) (*GetItemResponseType, error) {
	return service.GetItemContext(context.Background(), request)
}

func (service *exchangeServicePortType) CreateItemContext(ctx context.Context, request *CreateItemType) (*CreateItemResponseType, error) {
	response := new(CreateItemResponseType)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/CreateItem", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) CreateItem(request *CreateItemType) (*CreateItemResponseType, error) {
	return service.CreateItemContext(context.Background(), request)
}

func (service *exchangeServicePortType) DeleteItemContext(ctx context.Context, request *DeleteItemType) (*DeleteItemResponseType, error) {
	response := new(DeleteItemResponseType)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/DeleteItem", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) DeleteItem(request *DeleteItemType) (*DeleteItemResponseType, error) {
	return service.DeleteItemContext(context.Background(), request)
}

func (service *exchangeServicePortType) UpdateItemContext(ctx context.Context, request *UpdateItemType) (*UpdateItemResponseType, error) {
	response := new(UpdateItemResponseType)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/UpdateItem", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) UpdateItem(request *UpdateItemType) (*UpdateItemResponseType, error) {
	return service.UpdateItemContext(context.Background(), request)
}

func (service *exchangeServicePortType) UpdateItemInRecoverableItemsContext(ctx context.Context, request *UpdateItemInRecoverableItemsType) (*UpdateItemInRecoverableItemsResponseType, error) {
	response := new(UpdateItemInRecoverableItemsResponseType)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/UpdateItemInRecoverableItems", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) UpdateItemInRecoverableItems(request *UpdateItemInRecoverableItemsType) (*UpdateItemInRecoverableItemsResponseType, error) {
	return service.UpdateItemInRecoverableItemsContext(context.Background(), request)
}

func (service *exchangeServicePortType) SendItemContext(ctx context.Context, request *SendItemType) (*SendItemResponseType, error) {
	response := new(SendItemResponseType)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/SendItem", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) SendItem(request *SendItemType) (*SendItemResponseType, error) {
	return service.SendItemContext(context.Background(), request)
}

func (service *exchangeServicePortType) MoveItemContext(ctx context.Context, request *MoveItemType) (*MoveItemResponseType, error) {
	response := new(MoveItemResponseType)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/MoveItem", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) MoveItem(request *MoveItemType) (*MoveItemResponseType, error) {
	return service.MoveItemContext(context.Background(), request)
}

func (service *exchangeServicePortType) CopyItemContext(ctx context.Context, request *CopyItemType) (*CopyItemResponseType, error) {
	response := new(CopyItemResponseType)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/CopyItem", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) CopyItem(request *CopyItemType) (*CopyItemResponseType, error) {
	return service.CopyItemContext(context.Background(), request)
}

func (service *exchangeServicePortType) ArchiveItemContext(ctx context.Context, request *ArchiveItemType) (*ArchiveItemResponseType, error) {
	response := new(ArchiveItemResponseType)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/ArchiveItem", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) ArchiveItem(request *ArchiveItemType) (*ArchiveItemResponseType, error) {
	return service.ArchiveItemContext(context.Background(), request)
}

func (service *exchangeServicePortType) CreateAttachmentContext(ctx context.Context, request *CreateAttachmentType) (*CreateAttachmentResponseType, error) {
	response := new(CreateAttachmentResponseType)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/CreateAttachment", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) CreateAttachment(request *CreateAttachmentType) (*CreateAttachmentResponseType, error) {
	return service.CreateAttachmentContext(context.Background(), request)
}

func (service *exchangeServicePortType) DeleteAttachmentContext(ctx context.Context, request *DeleteAttachmentType) (*DeleteAttachmentResponseType, error) {
	response := new(DeleteAttachmentResponseType)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/DeleteAttachment", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) DeleteAttachment(request *DeleteAttachmentType) (*DeleteAttachmentResponseType, error) {
	return service.DeleteAttachmentContext(context.Background(), request)
}

func (service *exchangeServicePortType) GetAttachmentContext(ctx context.Context, request *GetAttachmentType) (*GetAttachmentResponseType, error) {
	response := new(GetAttachmentResponseType)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/GetAttachment", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) GetAttachment(request *GetAttachmentType) (*GetAttachmentResponseType, error) {
	return service.GetAttachmentContext(context.Background(), request)
}

func (service *exchangeServicePortType) GetClientAccessTokenContext(ctx context.Context, request *GetClientAccessTokenType) (*GetClientAccessTokenResponseType, error) {
	response := new(GetClientAccessTokenResponseType)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/GetClientAccessToken", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) GetClientAccessToken(request *GetClientAccessTokenType) (*GetClientAccessTokenResponseType, error) {
	return service.GetClientAccessTokenContext(context.Background(), request)
}

func (service *exchangeServicePortType) GetDelegateContext(ctx context.Context, request *GetDelegateType) (*GetDelegateResponseMessageType, error) {
	response := new(GetDelegateResponseMessageType)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/GetDelegate", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) GetDelegate(request *GetDelegateType) (*GetDelegateResponseMessageType, error) {
	return service.GetDelegateContext(context.Background(), request)
}

func (service *exchangeServicePortType) AddDelegateContext(ctx context.Context, request *AddDelegateType) (*AddDelegateResponseMessageType, error) {
	response := new(AddDelegateResponseMessageType)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/AddDelegate", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) AddDelegate(request *AddDelegateType) (*AddDelegateResponseMessageType, error) {
	return service.AddDelegateContext(context.Background(), request)
}

func (service *exchangeServicePortType) RemoveDelegateContext(ctx context.Context, request *RemoveDelegateType) (*RemoveDelegateResponseMessageType, error) {
	response := new(RemoveDelegateResponseMessageType)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/RemoveDelegate", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) RemoveDelegate(request *RemoveDelegateType) (*RemoveDelegateResponseMessageType, error) {
	return service.RemoveDelegateContext(context.Background(), request)
}

func (service *exchangeServicePortType) UpdateDelegateContext(ctx context.Context, request *UpdateDelegateType) (*UpdateDelegateResponseMessageType, error) {
	response := new(UpdateDelegateResponseMessageType)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/UpdateDelegate", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) UpdateDelegate(request *UpdateDelegateType) (*UpdateDelegateResponseMessageType, error) {
	return service.UpdateDelegateContext(context.Background(), request)
}

func (service *exchangeServicePortType) CreateUserConfigurationContext(ctx context.Context, request *CreateUserConfigurationType) (*CreateUserConfigurationResponseType, error) {
	response := new(CreateUserConfigurationResponseType)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/CreateUserConfiguration", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) CreateUserConfiguration(request *CreateUserConfigurationType) (*CreateUserConfigurationResponseType, error) {
	return service.CreateUserConfigurationContext(context.Background(), request)
}

func (service *exchangeServicePortType) DeleteUserConfigurationContext(ctx context.Context, request *DeleteUserConfigurationType) (*DeleteUserConfigurationResponseType, error) {
	response := new(DeleteUserConfigurationResponseType)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/DeleteUserConfiguration", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) DeleteUserConfiguration(request *DeleteUserConfigurationType) (*DeleteUserConfigurationResponseType, error) {
	return service.DeleteUserConfigurationContext(context.Background(), request)
}

func (service *exchangeServicePortType) GetUserConfigurationContext(ctx context.Context, request *GetUserConfigurationType) (*GetUserConfigurationResponseType, error) {
	response := new(GetUserConfigurationResponseType)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/GetUserConfiguration", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) GetUserConfiguration(request *GetUserConfigurationType) (*GetUserConfigurationResponseType, error) {
	return service.GetUserConfigurationContext(context.Background(), request)
}

func (service *exchangeServicePortType) GetSpecificUserConfigurationContext(ctx context.Context, request *GetSpecificUserConfigurationType) (*GetSpecificUserConfigurationResponseType, error) {
	response := new(GetSpecificUserConfigurationResponseType)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/GetSpecificUserConfiguration", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) GetSpecificUserConfiguration(request *GetSpecificUserConfigurationType) (*GetSpecificUserConfigurationResponseType, error) {
	return service.GetSpecificUserConfigurationContext(context.Background(), request)
}

func (service *exchangeServicePortType) UpdateUserConfigurationContext(ctx context.Context, request *UpdateUserConfigurationType) (*UpdateUserConfigurationResponseType, error) {
	response := new(UpdateUserConfigurationResponseType)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/UpdateUserConfiguration", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) UpdateUserConfiguration(request *UpdateUserConfigurationType) (*UpdateUserConfigurationResponseType, error) {
	return service.UpdateUserConfigurationContext(context.Background(), request)
}

func (service *exchangeServicePortType) GetUserAvailabilityContext(ctx context.Context, request *GetUserAvailabilityRequestType) (*GetUserAvailabilityResponseType, error) {
	response := new(GetUserAvailabilityResponseType)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/GetUserAvailability", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) GetUserAvailability(request *GetUserAvailabilityRequestType) (*GetUserAvailabilityResponseType, error) {
	return service.GetUserAvailabilityContext(context.Background(), request)
}

func (service *exchangeServicePortType) GetUserOofSettingsContext(ctx context.Context, request *GetUserOofSettingsRequest) (*GetUserOofSettingsResponse, error) {
	response := new(GetUserOofSettingsResponse)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/GetUserOofSettings", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) GetUserOofSettings(request *GetUserOofSettingsRequest) (*GetUserOofSettingsResponse, error) {
	return service.GetUserOofSettingsContext(context.Background(), request)
}

func (service *exchangeServicePortType) SetUserOofSettingsContext(ctx context.Context, request *SetUserOofSettingsRequest) (*SetUserOofSettingsResponse, error) {
	response := new(SetUserOofSettingsResponse)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/SetUserOofSettings", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) SetUserOofSettings(request *SetUserOofSettingsRequest) (*SetUserOofSettingsResponse, error) {
	return service.SetUserOofSettingsContext(context.Background(), request)
}

func (service *exchangeServicePortType) GetServiceConfigurationContext(ctx context.Context, request *GetServiceConfigurationType) (*GetServiceConfigurationResponseMessageType, error) {
	response := new(GetServiceConfigurationResponseMessageType)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/GetServiceConfiguration", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) GetServiceConfiguration(request *GetServiceConfigurationType) (*GetServiceConfigurationResponseMessageType, error) {
	return service.GetServiceConfigurationContext(context.Background(), request)
}

func (service *exchangeServicePortType) GetMailTipsContext(ctx context.Context, request *GetMailTipsType) (*GetMailTipsResponseMessageType, error) {
	response := new(GetMailTipsResponseMessageType)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/GetMailTips", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) GetMailTips(request *GetMailTipsType) (*GetMailTipsResponseMessageType, error) {
	return service.GetMailTipsContext(context.Background(), request)
}

func (service *exchangeServicePortType) PlayOnPhoneContext(ctx context.Context, request *PlayOnPhoneType) (*PlayOnPhoneResponseMessageType, error) {
	response := new(PlayOnPhoneResponseMessageType)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/PlayOnPhone", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) PlayOnPhone(request *PlayOnPhoneType) (*PlayOnPhoneResponseMessageType, error) {
	return service.PlayOnPhoneContext(context.Background(), request)
}

func (service *exchangeServicePortType) GetPhoneCallInformationContext(ctx context.Context, request *GetPhoneCallInformationType) (*GetPhoneCallInformationResponseMessageType, error) {
	response := new(GetPhoneCallInformationResponseMessageType)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/GetPhoneCallInformation", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) GetPhoneCallInformation(request *GetPhoneCallInformationType) (*GetPhoneCallInformationResponseMessageType, error) {
	return service.GetPhoneCallInformationContext(context.Background(), request)
}

func (service *exchangeServicePortType) DisconnectPhoneCallContext(ctx context.Context, request *DisconnectPhoneCallType) (*DisconnectPhoneCallResponseMessageType, error) {
	response := new(DisconnectPhoneCallResponseMessageType)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/DisconnectPhoneCall", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) DisconnectPhoneCall(request *DisconnectPhoneCallType) (*DisconnectPhoneCallResponseMessageType, error) {
	return service.DisconnectPhoneCallContext(context.Background(), request)
}

func (service *exchangeServicePortType) GetSharingMetadataContext(ctx context.Context, request *GetSharingMetadataType) (*GetSharingMetadataResponseMessageType, error) {
	response := new(GetSharingMetadataResponseMessageType)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/GetSharingMetadata", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) GetSharingMetadata(request *GetSharingMetadataType) (*GetSharingMetadataResponseMessageType, error) {
	return service.GetSharingMetadataContext(context.Background(), request)
}

func (service *exchangeServicePortType) RefreshSharingFolderContext(ctx context.Context, request *RefreshSharingFolderType) (*RefreshSharingFolderResponseMessageType, error) {
	response := new(RefreshSharingFolderResponseMessageType)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/RefreshSharingFolder", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) RefreshSharingFolder(request *RefreshSharingFolderType) (*RefreshSharingFolderResponseMessageType, error) {
	return service.RefreshSharingFolderContext(context.Background(), request)
}

func (service *exchangeServicePortType) GetSharingFolderContext(ctx context.Context, request *GetSharingFolderType) (*GetSharingFolderResponseMessageType, error) {
	response := new(GetSharingFolderResponseMessageType)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/GetSharingFolder", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) GetSharingFolder(request *GetSharingFolderType) (*GetSharingFolderResponseMessageType, error) {
	return service.GetSharingFolderContext(context.Background(), request)
}

func (service *exchangeServicePortType) SetTeamMailboxContext(ctx context.Context, request *SetTeamMailboxRequestType) (*SetTeamMailboxResponseMessageType, error) {
	response := new(SetTeamMailboxResponseMessageType)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/SetTeamMailbox", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) SetTeamMailbox(request *SetTeamMailboxRequestType) (*SetTeamMailboxResponseMessageType, error) {
	return service.SetTeamMailboxContext(context.Background(), request)
}

func (service *exchangeServicePortType) UnpinTeamMailboxContext(ctx context.Context, request *UnpinTeamMailboxRequestType) (*UnpinTeamMailboxResponseMessageType, error) {
	response := new(UnpinTeamMailboxResponseMessageType)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/UnpinTeamMailbox", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) UnpinTeamMailbox(request *UnpinTeamMailboxRequestType) (*UnpinTeamMailboxResponseMessageType, error) {
	return service.UnpinTeamMailboxContext(context.Background(), request)
}

func (service *exchangeServicePortType) GetRoomListsContext(ctx context.Context, request *GetRoomListsType) (*GetRoomListsResponseMessageType, error) {
	response := new(GetRoomListsResponseMessageType)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/GetRoomLists", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) GetRoomLists(request *GetRoomListsType) (*GetRoomListsResponseMessageType, error) {
	return service.GetRoomListsContext(context.Background(), request)
}

func (service *exchangeServicePortType) GetRoomsContext(ctx context.Context, request *GetRoomsType) (*GetRoomsResponseMessageType, error) {
	response := new(GetRoomsResponseMessageType)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/GetRooms", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) GetRooms(request *GetRoomsType) (*GetRoomsResponseMessageType, error) {
	return service.GetRoomsContext(context.Background(), request)
}

func (service *exchangeServicePortType) FindMessageTrackingReportContext(ctx context.Context, request *FindMessageTrackingReportRequestType) (*FindMessageTrackingReportResponseMessageType, error) {
	response := new(FindMessageTrackingReportResponseMessageType)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/FindMessageTrackingReport", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) FindMessageTrackingReport(request *FindMessageTrackingReportRequestType) (*FindMessageTrackingReportResponseMessageType, error) {
	return service.FindMessageTrackingReportContext(context.Background(), request)
}

func (service *exchangeServicePortType) GetMessageTrackingReportContext(ctx context.Context, request *GetMessageTrackingReportRequestType) (*GetMessageTrackingReportResponseMessageType, error) {
	response := new(GetMessageTrackingReportResponseMessageType)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/GetMessageTrackingReport", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) GetMessageTrackingReport(request *GetMessageTrackingReportRequestType) (*GetMessageTrackingReportResponseMessageType, error) {
	return service.GetMessageTrackingReportContext(context.Background(), request)
}

func (service *exchangeServicePortType) FindConversationContext(ctx context.Context, request *FindConversationType) (*FindConversationResponseMessageType, error) {
	response := new(FindConversationResponseMessageType)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/FindConversation", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) FindConversation(request *FindConversationType) (*FindConversationResponseMessageType, error) {
	return service.FindConversationContext(context.Background(), request)
}

func (service *exchangeServicePortType) ApplyConversationActionContext(ctx context.Context, request *ApplyConversationActionType) (*ApplyConversationActionResponseType, error) {
	response := new(ApplyConversationActionResponseType)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/ApplyConversationAction", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) ApplyConversationAction(request *ApplyConversationActionType) (*ApplyConversationActionResponseType, error) {
	return service.ApplyConversationActionContext(context.Background(), request)
}

func (service *exchangeServicePortType) GetConversationItemsContext(ctx context.Context, request *GetConversationItemsType) (*GetConversationItemsResponseType, error) {
	response := new(GetConversationItemsResponseType)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/GetConversationItems", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) GetConversationItems(request *GetConversationItemsType) (*GetConversationItemsResponseType, error) {
	return service.GetConversationItemsContext(context.Background(), request)
}

func (service *exchangeServicePortType) FindPeopleContext(ctx context.Context, request *FindPeopleType) (*FindPeopleResponseMessageType, error) {
	response := new(FindPeopleResponseMessageType)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/FindPeople", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) FindPeople(request *FindPeopleType) (*FindPeopleResponseMessageType, error) {
	return service.FindPeopleContext(context.Background(), request)
}

func (service *exchangeServicePortType) FindTagsContext(ctx context.Context, request *FindTagsType) (*FindTagsResponseMessageType, error) {
	response := new(FindTagsResponseMessageType)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/FindTags", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) FindTags(request *FindTagsType) (*FindTagsResponseMessageType, error) {
	return service.FindTagsContext(context.Background(), request)
}

func (service *exchangeServicePortType) AddTagContext(ctx context.Context, request *AddTagType) (*AddTagResponseMessageType, error) {
	response := new(AddTagResponseMessageType)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/AddTag", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) AddTag(request *AddTagType) (*AddTagResponseMessageType, error) {
	return service.AddTagContext(context.Background(), request)
}

func (service *exchangeServicePortType) HideTagContext(ctx context.Context, request *HideTagType) (*HideTagResponseMessageType, error) {
	response := new(HideTagResponseMessageType)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/HideTag", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) HideTag(request *HideTagType) (*HideTagResponseMessageType, error) {
	return service.HideTagContext(context.Background(), request)
}

func (service *exchangeServicePortType) GetPersonaContext(ctx context.Context, request *GetPersonaType) (*GetPersonaResponseMessageType, error) {
	response := new(GetPersonaResponseMessageType)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/GetPersona", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) GetPersona(request *GetPersonaType) (*GetPersonaResponseMessageType, error) {
	return service.GetPersonaContext(context.Background(), request)
}

func (service *exchangeServicePortType) GetInboxRulesContext(ctx context.Context, request *GetInboxRulesRequestType) (*GetInboxRulesResponseType, error) {
	response := new(GetInboxRulesResponseType)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/GetInboxRules", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) GetInboxRules(request *GetInboxRulesRequestType) (*GetInboxRulesResponseType, error) {
	return service.GetInboxRulesContext(context.Background(), request)
}

func (service *exchangeServicePortType) UpdateInboxRulesContext(ctx context.Context, request *UpdateInboxRulesRequestType) (*UpdateInboxRulesResponseType, error) {
	response := new(UpdateInboxRulesResponseType)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/UpdateInboxRules", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) UpdateInboxRules(request *UpdateInboxRulesRequestType) (*UpdateInboxRulesResponseType, error) {
	return service.UpdateInboxRulesContext(context.Background(), request)
}

func (service *exchangeServicePortType) GetPasswordExpirationDateContext(ctx context.Context, request *GetPasswordExpirationDateType) (*GetPasswordExpirationDateResponseMessageType, error) {
	response := new(GetPasswordExpirationDateResponseMessageType)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/GetPasswordExpirationDate", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) GetPasswordExpirationDate(request *GetPasswordExpirationDateType) (*GetPasswordExpirationDateResponseMessageType, error) {
	return service.GetPasswordExpirationDateContext(context.Background(), request)
}

func (service *exchangeServicePortType) GetSearchableMailboxesContext(ctx context.Context, request *GetSearchableMailboxesType) (*GetSearchableMailboxesResponseMessageType, error) {
	response := new(GetSearchableMailboxesResponseMessageType)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/GetSearchableMailboxes", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) GetSearchableMailboxes(request *GetSearchableMailboxesType) (*GetSearchableMailboxesResponseMessageType, error) {
	return service.GetSearchableMailboxesContext(context.Background(), request)
}

func (service *exchangeServicePortType) SearchMailboxesContext(ctx context.Context, request *SearchMailboxesType) (*SearchMailboxesResponseType, error) {
	response := new(SearchMailboxesResponseType)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/SearchMailboxes", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) SearchMailboxes(request *SearchMailboxesType) (*SearchMailboxesResponseType, error) {
	return service.SearchMailboxesContext(context.Background(), request)
}

func (service *exchangeServicePortType) GetDiscoverySearchConfigurationContext(ctx context.Context, request *GetDiscoverySearchConfigurationType) (*GetDiscoverySearchConfigurationResponseMessageType, error) {
	response := new(GetDiscoverySearchConfigurationResponseMessageType)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/GetDiscoverySearchConfiguration", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) GetDiscoverySearchConfiguration(request *GetDiscoverySearchConfigurationType) (*GetDiscoverySearchConfigurationResponseMessageType, error) {
	return service.GetDiscoverySearchConfigurationContext(context.Background(), request)
}

func (service *exchangeServicePortType) GetHoldOnMailboxesContext(ctx context.Context, request *GetHoldOnMailboxesType) (*GetHoldOnMailboxesResponseMessageType, error) {
	response := new(GetHoldOnMailboxesResponseMessageType)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/GetHoldOnMailboxes", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) GetHoldOnMailboxes(request *GetHoldOnMailboxesType) (*GetHoldOnMailboxesResponseMessageType, error) {
	return service.GetHoldOnMailboxesContext(context.Background(), request)
}

func (service *exchangeServicePortType) SetHoldOnMailboxesContext(ctx context.Context, request *SetHoldOnMailboxesType) (*SetHoldOnMailboxesResponseMessageType, error) {
	response := new(SetHoldOnMailboxesResponseMessageType)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/SetHoldOnMailboxes", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) SetHoldOnMailboxes(request *SetHoldOnMailboxesType) (*SetHoldOnMailboxesResponseMessageType, error) {
	return service.SetHoldOnMailboxesContext(context.Background(), request)
}

func (service *exchangeServicePortType) GetNonIndexableItemStatisticsContext(ctx context.Context, request *GetNonIndexableItemStatisticsType) (*GetNonIndexableItemStatisticsResponseMessageType, error) {
	response := new(GetNonIndexableItemStatisticsResponseMessageType)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/GetNonIndexableItemStatistics", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) GetNonIndexableItemStatistics(request *GetNonIndexableItemStatisticsType) (*GetNonIndexableItemStatisticsResponseMessageType, error) {
	return service.GetNonIndexableItemStatisticsContext(context.Background(), request)
}

func (service *exchangeServicePortType) GetNonIndexableItemDetailsContext(ctx context.Context, request *GetNonIndexableItemDetailsType) (*GetNonIndexableItemDetailsResponseMessageType, error) {
	response := new(GetNonIndexableItemDetailsResponseMessageType)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/GetNonIndexableItemDetails", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) GetNonIndexableItemDetails(request *GetNonIndexableItemDetailsType) (*GetNonIndexableItemDetailsResponseMessageType, error) {
	return service.GetNonIndexableItemDetailsContext(context.Background(), request)
}

func (service *exchangeServicePortType) MarkAllItemsAsReadContext(ctx context.Context, request *MarkAllItemsAsReadType) (*MarkAllItemsAsReadResponseType, error) {
	response := new(MarkAllItemsAsReadResponseType)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/MarkAllItemsAsRead", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) MarkAllItemsAsRead(request *MarkAllItemsAsReadType) (*MarkAllItemsAsReadResponseType, error) {
	return service.MarkAllItemsAsReadContext(context.Background(), request)
}

func (service *exchangeServicePortType) MarkAsJunkContext(ctx context.Context, request *MarkAsJunkType) (*MarkAsJunkResponseType, error) {
	response := new(MarkAsJunkResponseType)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/MarkAsJunk", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) MarkAsJunk(request *MarkAsJunkType) (*MarkAsJunkResponseType, error) {
	return service.MarkAsJunkContext(context.Background(), request)
}

func (service *exchangeServicePortType) ReportMessageContext(ctx context.Context, request *ReportMessageType) (*ReportMessageResponseType, error) {
	response := new(ReportMessageResponseType)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/ReportMessage", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) ReportMessage(request *ReportMessageType) (*ReportMessageResponseType, error) {
	return service.ReportMessageContext(context.Background(), request)
}

func (service *exchangeServicePortType) GetAppManifestsContext(ctx context.Context, request *GetAppManifestsType) (*GetAppManifestsResponseType, error) {
	response := new(GetAppManifestsResponseType)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/GetAppManifests", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) GetAppManifests(request *GetAppManifestsType) (*GetAppManifestsResponseType, error) {
	return service.GetAppManifestsContext(context.Background(), request)
}

func (service *exchangeServicePortType) AddNewImContactToGroupContext(ctx context.Context, request *AddNewImContactToGroupType) (*AddNewImContactToGroupResponseMessageType, error) {
	response := new(AddNewImContactToGroupResponseMessageType)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/AddNewImContactToGroup", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) AddNewImContactToGroup(request *AddNewImContactToGroupType) (*AddNewImContactToGroupResponseMessageType, error) {
	return service.AddNewImContactToGroupContext(context.Background(), request)
}

func (service *exchangeServicePortType) AddNewTelUriContactToGroupContext(ctx context.Context, request *AddNewTelUriContactToGroupType) (*AddNewTelUriContactToGroupResponseMessageType, error) {
	response := new(AddNewTelUriContactToGroupResponseMessageType)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/AddNewTelUriContactToGroup", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) AddNewTelUriContactToGroup(request *AddNewTelUriContactToGroupType) (*AddNewTelUriContactToGroupResponseMessageType, error) {
	return service.AddNewTelUriContactToGroupContext(context.Background(), request)
}

func (service *exchangeServicePortType) AddImContactToGroupContext(ctx context.Context, request *AddImContactToGroupType) (*AddImContactToGroupResponseMessageType, error) {
	response := new(AddImContactToGroupResponseMessageType)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/AddImContactToGroup", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) AddImContactToGroup(request *AddImContactToGroupType) (*AddImContactToGroupResponseMessageType, error) {
	return service.AddImContactToGroupContext(context.Background(), request)
}

func (service *exchangeServicePortType) RemoveImContactFromGroupContext(ctx context.Context, request *RemoveImContactFromGroupType) (*RemoveImContactFromGroupResponseMessageType, error) {
	response := new(RemoveImContactFromGroupResponseMessageType)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/RemoveImContactFromGroup", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) RemoveImContactFromGroup(request *RemoveImContactFromGroupType) (*RemoveImContactFromGroupResponseMessageType, error) {
	return service.RemoveImContactFromGroupContext(context.Background(), request)
}

func (service *exchangeServicePortType) AddImGroupContext(ctx context.Context, request *AddImGroupType) (*AddImGroupResponseMessageType, error) {
	response := new(AddImGroupResponseMessageType)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/AddImGroup", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) AddImGroup(request *AddImGroupType) (*AddImGroupResponseMessageType, error) {
	return service.AddImGroupContext(context.Background(), request)
}

func (service *exchangeServicePortType) AddDistributionGroupToImListContext(ctx context.Context, request *AddDistributionGroupToImListType) (*AddDistributionGroupToImListResponseMessageType, error) {
	response := new(AddDistributionGroupToImListResponseMessageType)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/AddDistributionGroupToImList", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) AddDistributionGroupToImList(request *AddDistributionGroupToImListType) (*AddDistributionGroupToImListResponseMessageType, error) {
	return service.AddDistributionGroupToImListContext(context.Background(), request)
}

func (service *exchangeServicePortType) GetImItemListContext(ctx context.Context, request *GetImItemListType) (*GetImItemListResponseMessageType, error) {
	response := new(GetImItemListResponseMessageType)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/GetImItemList", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) GetImItemList(request *GetImItemListType) (*GetImItemListResponseMessageType, error) {
	return service.GetImItemListContext(context.Background(), request)
}

func (service *exchangeServicePortType) GetImItemsContext(ctx context.Context, request *GetImItemsType) (*GetImItemsResponseMessageType, error) {
	response := new(GetImItemsResponseMessageType)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/GetImItems", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) GetImItems(request *GetImItemsType) (*GetImItemsResponseMessageType, error) {
	return service.GetImItemsContext(context.Background(), request)
}

func (service *exchangeServicePortType) RemoveContactFromImListContext(ctx context.Context, request *RemoveContactFromImListType) (*RemoveContactFromImListResponseMessageType, error) {
	response := new(RemoveContactFromImListResponseMessageType)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/RemoveContactFromImList", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) RemoveContactFromImList(request *RemoveContactFromImListType) (*RemoveContactFromImListResponseMessageType, error) {
	return service.RemoveContactFromImListContext(context.Background(), request)
}

func (service *exchangeServicePortType) RemoveDistributionGroupFromImListContext(ctx context.Context, request *RemoveDistributionGroupFromImListType) (*RemoveDistributionGroupFromImListResponseMessageType, error) {
	response := new(RemoveDistributionGroupFromImListResponseMessageType)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/RemoveDistributionGroupFromImList", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) RemoveDistributionGroupFromImList(request *RemoveDistributionGroupFromImListType) (*RemoveDistributionGroupFromImListResponseMessageType, error) {
	return service.RemoveDistributionGroupFromImListContext(context.Background(), request)
}

func (service *exchangeServicePortType) RemoveImGroupContext(ctx context.Context, request *RemoveImGroupType) (*RemoveImGroupResponseMessageType, error) {
	response := new(RemoveImGroupResponseMessageType)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/RemoveImGroup", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) RemoveImGroup(request *RemoveImGroupType) (*RemoveImGroupResponseMessageType, error) {
	return service.RemoveImGroupContext(context.Background(), request)
}

func (service *exchangeServicePortType) SetImGroupContext(ctx context.Context, request *SetImGroupType) (*SetImGroupResponseMessageType, error) {
	response := new(SetImGroupResponseMessageType)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/SetImGroup", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) SetImGroup(request *SetImGroupType) (*SetImGroupResponseMessageType, error) {
	return service.SetImGroupContext(context.Background(), request)
}

func (service *exchangeServicePortType) SetImListMigrationCompletedContext(ctx context.Context, request *SetImListMigrationCompletedType) (*SetImListMigrationCompletedResponseMessageType, error) {
	response := new(SetImListMigrationCompletedResponseMessageType)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/SetImListMigrationCompleted", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) SetImListMigrationCompleted(request *SetImListMigrationCompletedType) (*SetImListMigrationCompletedResponseMessageType, error) {
	return service.SetImListMigrationCompletedContext(context.Background(), request)
}

func (service *exchangeServicePortType) GetUserRetentionPolicyTagsContext(ctx context.Context, request *GetUserRetentionPolicyTagsType) (*GetUserRetentionPolicyTagsResponseMessageType, error) {
	response := new(GetUserRetentionPolicyTagsResponseMessageType)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/GetUserRetentionPolicyTags", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) GetUserRetentionPolicyTags(request *GetUserRetentionPolicyTagsType) (*GetUserRetentionPolicyTagsResponseMessageType, error) {
	return service.GetUserRetentionPolicyTagsContext(context.Background(), request)
}

func (service *exchangeServicePortType) InstallAppContext(ctx context.Context, request *InstallAppType) (*InstallAppResponseType, error) {
	response := new(InstallAppResponseType)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/InstallApp", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) InstallApp(request *InstallAppType) (*InstallAppResponseType, error) {
	return service.InstallAppContext(context.Background(), request)
}

func (service *exchangeServicePortType) UninstallAppContext(ctx context.Context, request *UninstallAppType) (*UninstallAppResponseType, error) {
	response := new(UninstallAppResponseType)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/UninstallApp", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) UninstallApp(request *UninstallAppType) (*UninstallAppResponseType, error) {
	return service.UninstallAppContext(context.Background(), request)
}

func (service *exchangeServicePortType) DisableAppContext(ctx context.Context, request *DisableAppType) (*DisableAppResponseType, error) {
	response := new(DisableAppResponseType)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/DisableApp", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) DisableApp(request *DisableAppType) (*DisableAppResponseType, error) {
	return service.DisableAppContext(context.Background(), request)
}

func (service *exchangeServicePortType) GetAppMarketplaceUrlContext(ctx context.Context, request *GetAppMarketplaceUrlType) (*GetAppMarketplaceUrlResponseMessageType, error) {
	response := new(GetAppMarketplaceUrlResponseMessageType)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/GetAppMarketplaceUrl", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) GetAppMarketplaceUrl(request *GetAppMarketplaceUrlType) (*GetAppMarketplaceUrlResponseMessageType, error) {
	return service.GetAppMarketplaceUrlContext(context.Background(), request)
}

func (service *exchangeServicePortType) FindAvailableMeetingTimesContext(ctx context.Context, request *FindAvailableMeetingTimesType) (*FindAvailableMeetingTimesResponseMessageType, error) {
	response := new(FindAvailableMeetingTimesResponseMessageType)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/FindAvailableMeetingTimes", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) FindAvailableMeetingTimes(request *FindAvailableMeetingTimesType) (*FindAvailableMeetingTimesResponseMessageType, error) {
	return service.FindAvailableMeetingTimesContext(context.Background(), request)
}

func (service *exchangeServicePortType) FindMeetingTimeCandidatesContext(ctx context.Context, request *FindMeetingTimeCandidatesType) (*FindMeetingTimeCandidatesResponseMessageType, error) {
	response := new(FindMeetingTimeCandidatesResponseMessageType)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/FindMeetingTimeCandidates", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) FindMeetingTimeCandidates(request *FindMeetingTimeCandidatesType) (*FindMeetingTimeCandidatesResponseMessageType, error) {
	return service.FindMeetingTimeCandidatesContext(context.Background(), request)
}

func (service *exchangeServicePortType) GetUserPhotoContext(ctx context.Context, request *GetUserPhotoType) (*GetUserPhotoResponseMessageType, error) {
	response := new(GetUserPhotoResponseMessageType)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/GetUserPhoto", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) GetUserPhoto(request *GetUserPhotoType) (*GetUserPhotoResponseMessageType, error) {
	return service.GetUserPhotoContext(context.Background(), request)
}

func (service *exchangeServicePortType) SetUserPhotoContext(ctx context.Context, request *SetUserPhotoType) (*SetUserPhotoResponseMessageType, error) {
	response := new(SetUserPhotoResponseMessageType)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/SetUserPhoto", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) SetUserPhoto(request *SetUserPhotoType) (*SetUserPhotoResponseMessageType, error) {
	return service.SetUserPhotoContext(context.Background(), request)
}

func (service *exchangeServicePortType) GetMeetingSpaceContext(ctx context.Context, request *GetMeetingSpaceType) (*GetMeetingSpaceResponseMessageType, error) {
	response := new(GetMeetingSpaceResponseMessageType)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/GetMeetingSpace", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) GetMeetingSpace(request *GetMeetingSpaceType) (*GetMeetingSpaceResponseMessageType, error) {
	return service.GetMeetingSpaceContext(context.Background(), request)
}

func (service *exchangeServicePortType) DeleteMeetingSpaceContext(ctx context.Context, request *DeleteMeetingSpaceType) (*DeleteMeetingSpaceResponseMessageType, error) {
	response := new(DeleteMeetingSpaceResponseMessageType)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/DeleteMeetingSpace", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) DeleteMeetingSpace(request *DeleteMeetingSpaceType) (*DeleteMeetingSpaceResponseMessageType, error) {
	return service.DeleteMeetingSpaceContext(context.Background(), request)
}

func (service *exchangeServicePortType) UpdateMeetingSpaceContext(ctx context.Context, request *UpdateMeetingSpaceType) (*UpdateMeetingSpaceResponseMessageType, error) {
	response := new(UpdateMeetingSpaceResponseMessageType)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/UpdateMeetingSpace", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) UpdateMeetingSpace(request *UpdateMeetingSpaceType) (*UpdateMeetingSpaceResponseMessageType, error) {
	return service.UpdateMeetingSpaceContext(context.Background(), request)
}

func (service *exchangeServicePortType) CreateMeetingSpaceContext(ctx context.Context, request *CreateMeetingSpaceType) (*CreateMeetingSpaceResponseMessageType, error) {
	response := new(CreateMeetingSpaceResponseMessageType)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/CreateMeetingSpace", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) CreateMeetingSpace(request *CreateMeetingSpaceType) (*CreateMeetingSpaceResponseMessageType, error) {
	return service.CreateMeetingSpaceContext(context.Background(), request)
}

func (service *exchangeServicePortType) FindMeetingSpaceByJoinUrlContext(ctx context.Context, request *FindMeetingSpaceByJoinUrlType) (*FindMeetingSpaceByJoinUrlResponseMessageType, error) {
	response := new(FindMeetingSpaceByJoinUrlResponseMessageType)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/FindMeetingSpaceByJoinUrl", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) FindMeetingSpaceByJoinUrl(request *FindMeetingSpaceByJoinUrlType) (*FindMeetingSpaceByJoinUrlResponseMessageType, error) {
	return service.FindMeetingSpaceByJoinUrlContext(context.Background(), request)
}

func (service *exchangeServicePortType) GetMeetingInstanceContext(ctx context.Context, request *GetMeetingInstanceRequestType) (*GetMeetingInstanceResponseMessageType, error) {
	response := new(GetMeetingInstanceResponseMessageType)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/GetMeetingInstanceRequest", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) GetMeetingInstance(request *GetMeetingInstanceRequestType) (*GetMeetingInstanceResponseMessageType, error) {
	return service.GetMeetingInstanceContext(context.Background(), request)
}

func (service *exchangeServicePortType) DeleteMeetingInstanceContext(ctx context.Context, request *DeleteMeetingInstanceRequestType) (*DeleteMeetingInstanceResponseMessageType, error) {
	response := new(DeleteMeetingInstanceResponseMessageType)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/DeleteMeetingInstanceRequest", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) DeleteMeetingInstance(request *DeleteMeetingInstanceRequestType) (*DeleteMeetingInstanceResponseMessageType, error) {
	return service.DeleteMeetingInstanceContext(context.Background(), request)
}

func (service *exchangeServicePortType) UpdateMeetingInstanceContext(ctx context.Context, request *UpdateMeetingInstanceRequestType) (*UpdateMeetingInstanceResponseMessageType, error) {
	response := new(UpdateMeetingInstanceResponseMessageType)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/UpdateMeetingInstanceRequest", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) UpdateMeetingInstance(request *UpdateMeetingInstanceRequestType) (*UpdateMeetingInstanceResponseMessageType, error) {
	return service.UpdateMeetingInstanceContext(context.Background(), request)
}

func (service *exchangeServicePortType) CreateMeetingInstanceContext(ctx context.Context, request *CreateMeetingInstanceRequestType) (*CreateMeetingInstanceResponseMessageType, error) {
	response := new(CreateMeetingInstanceResponseMessageType)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/CreateMeetingInstanceRequest", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) CreateMeetingInstance(request *CreateMeetingInstanceRequestType) (*CreateMeetingInstanceResponseMessageType, error) {
	return service.CreateMeetingInstanceContext(context.Background(), request)
}

func (service *exchangeServicePortType) StartSearchSessionContext(ctx context.Context, request *StartSearchSession) (*StartSearchSessionResponseMessage, error) {
	response := new(StartSearchSessionResponseMessage)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/StartSearchSession", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) StartSearchSession(request *StartSearchSession) (*StartSearchSessionResponseMessage, error) {
	return service.StartSearchSessionContext(context.Background(), request)
}

func (service *exchangeServicePortType) GetSearchSuggestionsContext(ctx context.Context, request *GetSearchSuggestions) (*GetSearchSuggestionsResponseMessage, error) {
	response := new(GetSearchSuggestionsResponseMessage)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/GetSearchSuggestions", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) GetSearchSuggestions(request *GetSearchSuggestions) (*GetSearchSuggestionsResponseMessage, error) {
	return service.GetSearchSuggestionsContext(context.Background(), request)
}

func (service *exchangeServicePortType) DeleteSearchSuggestionContext(ctx context.Context, request *DeleteSearchSuggestion) (*DeleteSearchSuggestionResponseMessageType, error) {
	response := new(DeleteSearchSuggestionResponseMessageType)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/DeleteSearchSuggestion", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) DeleteSearchSuggestion(request *DeleteSearchSuggestion) (*DeleteSearchSuggestionResponseMessageType, error) {
	return service.DeleteSearchSuggestionContext(context.Background(), request)
}

func (service *exchangeServicePortType) ExecuteSearchContext(ctx context.Context, request *ExecuteSearch) (*ExecuteSearchResponseMessage, error) {
	response := new(ExecuteSearchResponseMessage)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/ExecuteSearch", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) ExecuteSearch(request *ExecuteSearch) (*ExecuteSearchResponseMessage, error) {
	return service.ExecuteSearchContext(context.Background(), request)
}

func (service *exchangeServicePortType) EndSearchSessionContext(ctx context.Context, request *EndSearchSession) (*EndSearchSessionResponseMessage, error) {
	response := new(EndSearchSessionResponseMessage)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/EndSearchSession", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) EndSearchSession(request *EndSearchSession) (*EndSearchSessionResponseMessage, error) {
	return service.EndSearchSessionContext(context.Background(), request)
}

func (service *exchangeServicePortType) GetLastPrivateCatalogUpdateContext(ctx context.Context, request *GetLastPrivateCatalogUpdateType) (*GetLastPrivateCatalogUpdateResponseType, error) {
	response := new(GetLastPrivateCatalogUpdateResponseType)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/GetLastPrivateCatalogUpdate", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) GetLastPrivateCatalogUpdate(request *GetLastPrivateCatalogUpdateType) (*GetLastPrivateCatalogUpdateResponseType, error) {
	return service.GetLastPrivateCatalogUpdateContext(context.Background(), request)
}

func (service *exchangeServicePortType) GetPrivateCatalogAddInsContext(ctx context.Context, request *GetPrivateCatalogAddInsType) (*GetPrivateCatalogAddInsResponseType, error) {
	response := new(GetPrivateCatalogAddInsResponseType)
	err := service.client.CallContext(ctx, "http://schemas.microsoft.com/exchange/services/2006/messages/GetPrivateCatalogAddIns", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *exchangeServicePortType) GetPrivateCatalogAddIns(request *GetPrivateCatalogAddInsType) (*GetPrivateCatalogAddInsResponseType, error) {
	return service.GetPrivateCatalogAddInsContext(context.Background(), request)
}
